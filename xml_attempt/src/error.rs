// ours
use crate::parser::ParserError;

// crates
use roxmltree as roxml;

// stdlib
use std::io;
use std::convert::From;

#[derive(Debug)]
pub enum Error {
    /// Some sort of error from the IO system.
    /// Most IO errors are considered fatal.
    IOError(io::Error),

    /// An error was generated by the XML parser
    /// The explict error type is hidden so that we do not expose the
    /// xml libray on API boundary.
    /// The error retruned in a stringified version of whatever the
    /// underlying library produced. All XML errors should be
    /// considered fatal, so user code should not ever attempt to
    /// recover from these.
    XMLError(String),

    /// Some error from our own parser
    ParserError(ParserError),
}

impl From<io::Error> for Error {
    fn from(e: io::Error) -> Self {
        Error::IOError(e)
    }
}

impl From<roxml::Error> for Error {
    fn from(e: roxml::Error) -> Self {
        Error::XMLError(format!("{:?}", e))
    }
}

impl From<ParserError> for Error {
    fn from(e: ParserError) -> Self {
        Error::ParserError(e)
    }
}
